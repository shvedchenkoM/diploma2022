#include <iostream>
#include <set>
#include "src/Data/MetroMap.hpp"
#include "src/Algorithms/GeneticAlgorithm.hpp"
#include "src/Utils/Random.hpp"
#include "src/Algorithms/LittleAlgorithm.hpp"
#include "src/matrix.hpp"
#include "src/Data/Prima.hpp"

using namespace std;


int main(int argc, char *argv[]) {

//Hardcode

    MetroMap map;
    string g = argv[1];

    map.load(g);
    cout << "ANS:" << endl;
//    int k = 100;
//    for (int i = 0; i < k; i++)
//        map.addVertex({to_string(i), i});
//    map.addVertex(*(new Vertex("A", 213)));
//    map.addVertex(*(new Vertex("B", 213)));
//    map.addVertex(*(new Vertex("C", 213)));
//    map.addVertex(*(new Vertex("D", 213)));
//    map.addVertex(*(new Vertex("E", 213)));

//
//    for (int i = 0; i < k * 5; i++)
//        map.addEdge(Random::range(0,k-1), Random::range(0,k-1), Random::range(0,1000));


//    map.addEdge(1, 0, 3);
//    map.addEdge(1, 2, 5);
//    map.addEdge(2, 3, 2);
//    map.addEdge(3, 1, 4);
//    map.addEdge(4, 1, 7);
//    map.printGraph();
//    cout << "Save start" << endl;
//    map.save("../res/graphs/1.mm");
//    cout << "Save end" << endl;
//
//    cout<<map.getSize();
//    map.printGraph();
//    cout << map.getDistance_by_Dijkstra(
//            {0,1,2,3,408,409,411,413,414,412,410,4,354,355,356,357,358,359,360,362,363,364,361,57,58,5,83,6,60,59,149,84,150,207,206,205,313,314,147,148,145,146,176,175,174,139,138,137,136,135,315,316,317,318,319,320,321,322,323,366,369,370,371,373,374,372,368,367,365,251,252,253,254,255,397,398,399,400,402,401,396,256,257,258,140,173,172,171,170,169,168,403,404,405,406,407,259,260,261,262,7,8,9,10,240,241,36,263,63,264,64,332,265,349,331,328,327,324,325,326,329,330,283,284,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,266,348,347,346,345,344,343,163,165,166,167,164,162,161,160,159,158,157,156,155,154,153,65,66,15,16,17,18,20,22,23,25,26,27,24,21,19,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,81,387,388,389,233,390,130,91,44,43,42,203,204,177,178,239,312,38,311,14,13,12,11,179,238,39,236,96,95,93,94,293,292,237,180,181,182,183,184,185,186,190,191,192,189,188,187,392,391,294,295,296,297,298,121,120,119,118,117,116,223,115,224,225,226,227,228,229,232,231,230,234,235,41,40,334,92,335,336,337,126,340,341,342,339,338,200,199,198,197,196,195,193,194,302,301,300,122,299,123,124,125,127,128,129,201,202,393,394,395,45,141,48,49,51,52,53,54,55,56,50,47,46,142,143,144,134,133,132,131,90,89,88,87,86,85,37,151,310,152,333,309,307,306,305,303,304,308,350,35,62,61,242,243,245,244,246,247,248,249,250,30,29,28,380,381,382,384,386,385,383,379,378,377,376,375,31,32,33,34,351,352,353,210,211,220,221,222,219,218,217,216,215,214,213,212,209,208,290,287,285,286,288,289,291,108,109,110,111,112,113,114,107,106,105,104,103,102,101,100,99,98,97}) << endl;
//    GeneticAlgorithm gen(20, 100, 70, map, 8);
//    gen.Run();
//    Prima p;
//    p.solve_Prima(map);

    Matrix<double> d(map.getSize());
    d.load(map);
    LittleSolver l(d);
    l.solve();
    cout<<l.getRecord()<<":";
    for(auto x : l.getSolution()){
        cout<<x<<" ";
    }
//    std::cout<<Random::range(0,1000)<<endl;
}
